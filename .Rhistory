attacks <- mutate(attacks, Time = ifelse(Time == "09h00 -10h00", "9h30", Time))
attacks <- mutate(attacks, Time = ifelse(Time == "2 hours after Opperman", "", Time))
attacks <- mutate(attacks, Time = ifelse(Time == "11h00 / 11h30", "11h15", Time))
attacks <- mutate(attacks, Time = ifelse(Time == "Between 06h00 & 07h20", "6h40", Time))
attacks <- mutate(attacks, Time = ifelse(Time == "30 minutes after 1992.07.08.a", "", Time))
attacks <- mutate(attacks, Time = ifelse(Time == "Possibly same incident as 2000.08.21", "", Time))
#now, our objective is to classify hours in parts of the day. indeed, it is useless to keep hours as they are
#for a regression because we want times like 7h30 and 7h00 OR 15h00 and 16h00 to be read as the same thing.
# some of the rows already had the part of the day in it, but in order to work easily with all the column, we
#replaced "morning" with 8h00 etc. in this way, we're able to remove all the strings that are useless. finally,
#void rows have been replaced by an NA and hours, which were there as CHAR have been replaced by numeric
attacks$Time <- str_replace_all(attacks$Time, "\\bmorning\\b", "8h00")
attacks$Time <- str_replace_all(attacks$Time, "\\bafternoon\\b", "15h00")
attacks$Time <- str_replace_all(attacks$Time, "\\bevening\\b", "20h00")
attacks$Time <- str_replace_all(attacks$Time, "\\bnight\\b", "23h00")
attacks$Time <- gsub("[^[:digit:]]", "", attacks$Time)
attacks$Time = na_if(attacks$Time, "")
attacks$Time <- as.numeric(attacks$Time)
# since we removed all the letters, hours now are not written as 8h00 or 15h30 but as 800 and 15h00. this is
# great for us, so that we can easily create a function that classifies those numbers as parts of the day. the
#function works this way: if a value is included between 0 and 500 (i.e. midnight and 5a.m.), the value is replaced
#by the word "night" etc.
timeoftheday <- function(time) {
if (!is.na(time)) {
if (time >= 0 && time < 500) {
return("night")
} else if (time >= 500 && time < 1200) {
return("morning")
} else if (time >= 1200 && time < 1730) {
return("afternoon")
} else if (time >= 1730 && time < 2400) {
return("evening")
} else {
return("")  # Handle any other cases (if necessary)
}
} else {
return(NA)  # Retain NA values
}
}
attacks$Time <- sapply(attacks$Time, timeoftheday)
attacks$Time <- tolower(attacks$Time)
sum(is.na(attacks$Time)) #this is the only one that still presents 1237 NA. we dont want to delete
#them all coz we'd lose 40% of our data.
table(attacks$Time)#table shows that most of them happen in the afternoon, while 2ns place is owned by
#morning. To confirm the higher frequency of attacks between 8am and 6pm is this artile (link JC found??)
#we explain this by the fact that, naturally, most of people swim during the day. therefore, what we do
#is replacing NA randomly by the proportion of afternoon, morning and evening.
attacks$Time <- na_if(attacks$Time, "")
898+228+589+9
898/1724
228/1724
589/1724
#afternoon is 52%, evening is 12% and morning is 34%.
attacks$Time <- ifelse(is.na(attacks$Time),
sample(c("afternoon", "morning", "evening", "night"),
size = sum(is.na(attacks$Time)),
replace = TRUE,
prob = c(0.52, 0.34, 0.12, 0.02)),
attacks$Time)
# Let's focus on the transformation of time where evening correspond to 0, afternoon to 1,
# morning to 2 and night to 3
attacks$Time <- as.numeric(factor(attacks$Time, levels = c("evening", "afternoon", "morning", "night")))
#________________________________________________________________________________________________________________________
#NOW WE WORK ON SEX
attacks$Sex <- na_if(attacks$Sex, "")
attacks$Sex <- ifelse(is.na(attacks$Sex), "Unknown", attacks$Sex)
# Let's do some n-coding
attacks$Sex <- ifelse(attacks$Sex == "M", 0,
ifelse(attacks$Sex == "F", 1, 2))
#________________________________________________________________________________________________________________________
#NOW WE WORK ON SHARK SPECIES
#Creation of a variable species where we delete all the numbers that concern the size of the shark
species <- str_replace_all(attacks$Species, "\\d", "")
#If there is an empty cell, we will put NA
species = na_if(attacks$Species, "")
#gsub pour enlever la ponctuation
species <- str_remove_all(species, "[[:punct:]]")
#gsub pour enlever les chiffres accompagnés de cm ou m
species <- gsub("\\d+\\s*(cm|m)\\b", "", species)
#gsub pour supprimer les mots de une ou deux lettres
species <- gsub("\\b\\w{1,2}\\b", "", species)
#gsub pour supprimer tous les chiffres
species <- gsub("\\d", "", species)
# Supprimer les unités de mesure (kg, lb, b)
species <- gsub("\\b(kg|lb|b)\\b", "", species)
species <- gsub("\\bshark\\b(.*\\bshark\\b)?", "shark", species, ignore.case = TRUE)
# Utiliser gsub pour regrouper nos espèces en espèces communes
species<- gsub("^.*White shark.*$", "White shark", species)
species<- gsub("^.*whitetip shark.*$", "White shark", species)
species<- gsub("^.*white shark.*$", "White shark", species)
species<- gsub("^.*Wobbegong shark.*$", "Wobbegong shark", species)
species<- gsub("^.*Wobbegong.*$", "Wobbegong shark", species)
species<- gsub("^.*Zambesi shark.*$", "Zambesi shark", species)
species<- gsub("^.*Zambezi shark.*$", "Zambesi shark", species)
species<- gsub("^.*whaler shark.*$", "Whale shark", species)
species<- gsub("^.*whale shark.*$", "Whale shark", species)
species<- gsub("^.*tiger shark.*$", "Tiger shark", species)
species<- gsub("^.*Tiger shark.*$", "Tiger shark", species)
species<- gsub("^.*thresher shark.*$", "Thresher shark", species)
species<- gsub("^.*spinner shark.*$", "Spinner shark", species)
species<- gsub("^.*Spinner shark feet.*$", "Spinner shark", species)
species<- gsub("^.*Spinner shark.*$", "Spinner shark", species)
species<- gsub("^.*spinner  blacktip shark.*$", "Spinner shark", species)
species<- gsub("^.*Tawny nurse shark.*$", "Nurse shark", species)
species<- gsub("^.*nurse shark.*$", "Nurse shark", species)
species<- gsub("^.*Nurse shark.*$", "Nurse shark", species)
species<- gsub("^.*Mako shark.*$", "Mako shark", species)
species<- gsub("^.*mako shark.*$", "Mako shark", species)
species<- gsub("^.*Lemon shark.*$", "Lemon shark", species)
species<- gsub(".*lemon shark.*", "Lemon shark", species, ignore.case = TRUE)
species<-gsub("^\\s*shark\\s*$", "Unidentified shark", species)
species<- gsub(".*bull.*", "Bull shark", species, ignore.case = TRUE)
species<- gsub(".*blue.*", "Blue shark", species, ignore.case = TRUE)
species<- gsub(".*reef.*", "Reef shark", species, ignore.case = TRUE)
species<- gsub(".*sand shark*", "Sand shark", species, ignore.case = TRUE)
species<- gsub("^.*Sand shark.*$", "Sand shark", species)
species<- gsub(".*Sand shark*", "Sand shark", species, ignore.case = TRUE)
species<- gsub(".*sandshark*", "Sand shark", species, ignore.case = TRUE)
species<- gsub(".*Sandbar shark*", "Sand shark", species, ignore.case = TRUE)
species<- gsub("juvenile\\s+\\w+", "Juvenile shark",species, ignore.case = TRUE)
species<- gsub("Juvenile shark shark", "Juvenile shark",species, ignore.case = TRUE)
species<- gsub("Juvenile shark  blacktip shark", "Juvenile shark",species, ignore.case = TRUE)
species<- gsub("blacktip\\s+\\w+", "Blacktip shark",species, ignore.case = TRUE)
species <- gsub("\\black\\w*\\b", "Blacktip shark", species, ignore.case = TRUE)
#remplacer toutes les occurrences du mot "blacktip" dans une colonne par "Blacktip Shark," même si le mot est accompagné par d'autres mots avant ou après
species <- gsub("\\bblacktip\\b", "Blacktip Shark", species, ignore.case = TRUE)
species<- gsub(".*copper shark*", "Copper shark", species, ignore.case = TRUE)
species <- gsub("\\bcow\\b", "Cow", species)
species <- gsub("\\bsilky\\b", "Silky", species)
species <- gsub("\\bsilvertip\\b", "Silvertip", species)
#conndition si "Hammerhead" suivi d'autre mots alors remplacé par Hammerhead shark
species <- ifelse(grepl("Hammerhead\\s+\\w+", species, ignore.case = TRUE), "Hammerhead shark", species)
species <- ifelse(grepl("Blacktip\\s+\\w+", species, ignore.case = TRUE), "Blacktip shark", species)
species <- ifelse(grepl("Raggedtooth\\s+\\w+", species, ignore.case = TRUE), "Raggedtooth shark", species)
species <- ifelse(grepl("Porbeagle\\s+\\w+", species, ignore.case = TRUE), "Porbeagle shark", species)
#si le mot shark apparaît pas alors NA
species <- ifelse(grepl("shark", species, ignore.case = TRUE), species, NA)
species <- ifelse(grepl("Juvenile\\s+\\w+", species, ignore.case = TRUE), "Juvenile shark", species)
species <- ifelse(grepl("grey\\s+\\w+", species, ignore.case = TRUE), "Grey shark", species)
species <- ifelse(grepl("greycolored\\s+\\w+", species, ignore.case = TRUE), "Grey shark", species)
species <- ifelse(grepl("gray\\s+\\w+", species, ignore.case = TRUE), "Grey shark", species)
species <- ifelse(grepl("Broadnose\\s+\\w+", species, ignore.case = TRUE), "Sevengill shark", species)
species <- ifelse(grepl("7gill\\s+\\w+", species, ignore.case = TRUE), "Sevengill shark", species)
species <- ifelse(grepl("sevengill\\s+\\w+", species, ignore.case = TRUE), "Sevengill shark", species)
species <- ifelse(grepl("black\\s+\\w+", species, ignore.case = TRUE), "Blacktip shark", species)
species <- ifelse(grepl("Sand\\s+\\w+", species, ignore.case = TRUE), "Sand shark", species)
species <- ifelse(grepl("Carpet\\s+\\w+", species, ignore.case = TRUE), "Carpet shark", species)
species <- ifelse(grepl("\\bbrown\\b", species, ignore.case = TRUE), "Brown shark", species)
species <- gsub("^frag\\w+", "Unrecognized shark", species)
species <- gsub("^shark$", "Unrecognized shark", species)
#Fonction pour vérifier si "small" est présent dans la cellule
contains_small <- function(text) {
return(grepl("small", text))
}
# Remplacer la cellule par "unidentified shark" si "small" est présent
species <- ifelse(sapply(species, contains_small), "Unidentified shark", species)
#Fonction pour vérifier si "Small" est présent dans la cellule
contains_small <- function(text) {
return(grepl("Small", text))
}
# Remplacer la cellule par "unidentified shark" si "Small" est présent
species <- ifelse(sapply(species, contains_small), "Unidentified shark", species)
#Fonction pour vérifier si "sharks" est présent dans la cellule
contains_sharks <- function(text) {
return(grepl("sharks", text))
}
# Remplacer la cellule par "unidentified shark" si "sharks" est présent
species <- ifelse(sapply(species, contains_sharks), "Unidentified shark", species)
#Fonction pour vérifier si "cookie" est présent dans la cellule
contains_cookie <- function(text) {
return(grepl("cookie", text))
}
# Remplacer la cellule par "Cookiecutter shark" si "cookie" est présent
species <- ifelse(sapply(species, contains_cookie), "Cookiecutter shark", species)
#Fonction pour vérifier si "involvement" est présent dans la cellule
contains_involvement <- function(text) {
return(grepl("involvement", text))
}
# Remplacer la cellule par "No shark" si "involvement" est présent
species <- ifelse(sapply(species, contains_involvement), "No shark", species)
#Fonction pour vérifier si "invovlement" est présent dans la cellule
contains_invovlement <- function(text) {
return(grepl("invovlement", text))
}
# Remplacer la cellule par "No shark" si "invovlement" est présent
species <- ifelse(sapply(species, contains_invovlement), "No shark", species)
#Fonction pour vérifier si "Not" est présent dans la cellule
contains_Not <- function(text) {
return(grepl("Not", text))
}
# Remplacer la cellule par "No shark" si "Not" est présent
species <- ifelse(sapply(species, contains_Not), "No shark", species)
#Fonction pour vérifier si "not" est présent dans la cellule
contains_not <- function(text) {
return(grepl("not", text))
}
# Remplacer la cellule par "No shark" si "not" est présent
species <- ifelse(sapply(species, contains_not), "No shark", species)
#Fonction pour vérifier si "Questionable" est présent dans la cellule
contains_Questionable <- function(text) {
return(grepl("Questionable", text))
}
# Remplacer la cellule par "No shark" si "Questionable" est présent
species <- ifelse(sapply(species, contains_Questionable), "No shark", species)
#Fonction pour vérifier si "questionable" est présent dans la cellule
contains_questionable <- function(text) {
return(grepl("questionable", text))
}
# Remplacer la cellule par "No shark" si "questionable" est présent
species <- ifelse(sapply(species, contains_questionable), "No shark", species)
#Fonction pour vérifier si "Salmon" est présent dans la cellule
contains_Salmon <- function(text) {
return(grepl("Salmon", text))
}
# Remplacer la cellule par "Salmon shark" si "Salmon" est présent
species <- ifelse(sapply(species, contains_Salmon), "Salmon shark", species)
#Fonction pour vérifier si "whaler" est présent dans la cellule
contains_whaler <- function(text) {
return(grepl("whaler", text))
}
# Remplacer la cellule par "Whale shark" si "involvement" est présent
species <- ifelse(sapply(species, contains_whaler), "Whale shark", species)
# Replace the cell with "Unidentified shark" if any of the specified words are found
species <- ifelse(grepl("(seen|observed|Tooth|tooth|large|killed|captive|female|metre|foot|followed|caused|Said|young|probably|gaffed)", species, ignore.case = TRUE), "Unidentified shark", species)
# Replace the cell with "No shark" if any of the specified words are found
species <- ifelse(grepl("(hoax|No Shark)", species, ignore.case = TRUE), "No shark", species)
# Replace the cell with "Copper shark" if any of the specified words are found
species <- ifelse(grepl("(Copper)", species, ignore.case = TRUE), "Copper shark", species)
# Replace the cell with "Dogfish shark" if any of the specified words are found
species <- ifelse(grepl("(Dog|dogfish)", species, ignore.case = TRUE), "Dogfish shark", species)
# Replace the cell with "Dusky shark" if any of the specified words are found
species <- ifelse(grepl("(Dusky)", species, ignore.case = TRUE), "Dusky shark", species)
# Replace the cell with "Sevengill shark" if any of the specified words are found
species <- ifelse(grepl("(gill)", species, ignore.case = TRUE), "Sevengill shark", species)
# Replace the cell with "Angel shark" if any of the specified words are found
species <- ifelse(grepl("(Angel)", species, ignore.case = TRUE), "Angel shark", species)
table(species)
# Compter le nombre de chaque catégorie
category_counts <- table(species)
# Créer un histogramme
histogram <- barplot(category_counts, col = "blue", main = "Histogramme de Catégories", xlab = "Catégories", ylab = "Fréquence")
# Afficher l'histogramme
print(histogram)
attacks$Species <- species
attacks$Species <- ifelse(is.na(attacks$Species), "Unknown", attacks$Species)
#Let's put the Species variable on numeric
attacks <- attacks %>%
mutate(Species = as.numeric(factor(Species)))
# Get the top 5 species
top_species <- attacks %>%
count(Species, sort = TRUE) %>%
slice_head(n = 5)
# Create a logical condition to include only the top 5 species
condition <- attacks$Species %in% top_species$Species
# Subset the data based on the condition
filtered_data <- attacks[condition, ]
#________________________________________________________________________________________________________________________
#ACTIVITY
#when trying to put everything in lower cap, this was the result: Errore in tolower(attacks$Activity) :
#stringa multibyte 921 non valida --> so converted everything in ASCII (=American Standard Code for Information Interchange)
attacks$Activity <- iconv(attacks$Activity, to = "ASCII", sub = " ")
attacks$Activity <- gsub("[^ -~]", "", attacks$Activity)
attacks$Activity <- tolower(attacks$Activity)
#when running a table of all activities, we can see that we can group them in some categories:
#diving, race, windsurfing, walking, wading, wade fishing, touching, swimming, surfing, surf,
# standing, spearfishing, snorkeling,  scuba diving, playing, paddle, murder, kayaking, kayak, floating, fishing,
attacks$Activity <- gsub("[^A-Za-z ]", "", attacks$Activity)
kept_activities <- c("diving", "race", "windsurfing", "walking", "wading", "wade fishing", "touching", "swimming", "surfing", "surf",
"standing", "spearfishing", "snorkeling", "scuba diving", "playing", "paddle", "murder", "kayaking", "kayak", "floating", "fishing")
# Your column name
column_name <- "Activity"
# Create a regular expression pattern that matches any of the specific words
pattern <- paste(kept_activities, collapse = "|")
# Extract only the specific words from the column and replace the rest with an empty string
attacks$Activity <- str_extract(attacks$Activity, paste0("\\b(?:", pattern, ")\\b"))
attacks <- attacks %>%
mutate(Activity = str_replace_all(Activity, "\\bkayaking\\b", "kayak")) %>%
mutate(Activity = str_replace_all(Activity, "\\bsurfing\\b", "surf"))
attacks$Activity[is.na(attacks$Activity)] <- "other"
#________________________________________________________________________________________________________________________
#FATAL
table(attacks$Fatal..Y.N.) #to check if categories have mistakes etc
attacks$Fatal..Y.N. <- gsub("2017", "", attacks$Fatal..Y.N.)
attacks$Fatal..Y.N. <- gsub("M", "", attacks$Fatal..Y.N.)
attacks$Fatal..Y.N. <-na_if(attacks$Fatal..Y.N., "")
attacks <- subset(attacks, !is.na(Fatal..Y.N.))
#Replace Yes by 1, 0 otherwise
attacks$Fatal..Y.N. <- ifelse(attacks$Fatal..Y.N. == "Y", 1, 0)
names(attacks)[names(attacks) == "Fatal..Y.N."] <- "Fatality"
#________________________________________________________________________________________
#TYPE
#Regroup some words under the same word "Boat"
attacks$Type <- gsub("Boatomg|Boating", "Boat", attacks$Type)
#Let's transform the Type variable on numeric. 1 corresponds to Boat, 2 to Unprovoked, Invalid to 3
# Provoked to 4, Questionable to 5 and Sea Disaster to 6
# Définir les correspondances entre catégories et chiffres
categories <- c("Boat" = 1, "Unprovoked" = 2, "Invalid" = 3, "Provoked" = 4, "Questionable" = 5, "Sea Disaster" = 6)
# Convertir la variable Type en facteur avec les nouvelles étiquettes
attacks$Type <- factor(attacks$Type, levels = names(categories))
# Convertir le facteur en numérique
attacks$Type <- as.numeric(attacks$Type)
#________________________________________________________________________________________________________________________
#final check up:
table(attacks$Date) #this one is fine
table(attacks$Year) #this one is fine
table(attacks$Type) #this one is fine
table(attacks$Country)#this one is fine
table(attacks$Activity)#this one is fine
table(attacks$Age)#this one is fine
table(attacks$Fatality)#this one is fine
table(attacks$Time)#this one is fine
table(attacks$Species)#this one is fine
#________________________________________________________________________________________________________________________
#ADD ISO CODE TO MAKE COUNTRIES IN COMMON
# Get ISO country codes
library(countrycode)
iso_codes <- countrycode(attacks$Country, "country.name", "iso3c")
attacks$ISO_Code <- countrycode(attacks$Country, "country.name", "iso3c")
#We can see that there are 23 countries with no ISO Code. We will fix them by hand.
rows_with_na <- which(is.na(attacks$ISO_Code))
rows_with_na
attacks$ISO_Code[attacks$Country %in% c("ENGLAND", "SCOTLAND", "BRITISH ISLES") & is.na(attacks$ISO_Code)] <- "GB"
attacks$ISO_Code[attacks$Country %in% c("AZORES") & is.na(attacks$ISO_Code)] <- "PRT"
attacks$ISO_Code[attacks$Country %in% c("ST. MAARTIN", "ST. MARTIN") & is.na(attacks$ISO_Code)] <- "MAF"
attacks$ISO_Code[attacks$Country %in% c("OKINAWA") & is.na(attacks$ISO_Code)] <- "JPN"
attacks$ISO_Code[attacks$Country %in% c("MICRONESIA") & is.na(attacks$ISO_Code)] <- "FSM"
attacks <- subset(attacks, !is.na(ISO_Code))
#________________________________________________________________________________________________________________________
#                           C L E A N I N G   OF    T E M P E R A T U R E S
#________________________________________________________________________________________________________________________
library(dplyr)
temperature <- read_xlsx("Temperature.xlsx")
#it did not read the "°C" on the column Unit, so I'll change it manually
temperature <- temperature %>% mutate(Unit = "°C")
#I take off all the columns that we do not need
temperature <- temperature %>% select(-'Area Code (M49)', -'Months Code', -'Element Code')
#eliminate all columns having an F at the end
columns_to_remove <- grep("F$", names(temperature), value = TRUE)
temperature <- temperature[, !(names(temperature) %in% columns_to_remove)]
# keep only meteorological year, we dont need to work with monthly stuff
target_name <- "Meteorological year"
temperature <- temperature[temperature$Months == target_name, ]
target_name2 <- "Temperature change"
temperature <- temperature[temperature$Element == target_name2, ]
#  take off cols that I dont need, take off NA and transforsm year cols so that i take off Y. in this
#way i can match with the main dataset
temperature <- temperature %>% select(-'Area Code', -'Months', -'Element', -'Unit')
new_colnames <- gsub("Y", "", colnames(temperature))
colnames(temperature) <- new_colnames
temperature <- na.omit(temperature)
# I need to change columns and rows so that the common variable (year) is on the left side
temperature <- t(temperature)
# I want the first row to be the header
colnames(temperature) <- temperature[1, ]
clean_temperature <- temperature[-1, ]
#col names in CAPS
colnames(clean_temperature) <- toupper(colnames(clean_temperature))
library(tidyr)
# Convert the matrix/array to a data frame
temperature <- as.data.frame(clean_temperature)
# Add 'Year' as a separate column
temperature$Year <- rownames(clean_temperature)
# Reshape the data from wide to long format
temperature <- tidyr::pivot_longer(temperature,
cols = -Year,
names_to = "Country",
values_to = "Temperature")
# Reorder columns as per your desired format
temperature <- temperature[c("Year", "Country", "Temperature")]
temperature <- temperature %>% filter(Year >= 1970)
temperature$Year <- as.numeric(temperature$Year)
temperature <- temperature %>%
mutate(Country = ifelse(Country == "UNITED STATES OF AMERICA", "USA", Country))
temperature$ISO_Code <- countrycode(temperature$Country, "country.name", "iso3c")
temperature$ISO_Code[temperature$Country %in% c("MICRONESIA") & is.na(temperature$ISO_Code)] <- "FSM"
#now that i put iso, i can remove the country one
temperature <- temperature %>% select(-'Country')
#________________________________________________________________________________________________________________________
#MERGE FIRST TWO DATA SETS
# Assuming 'Year' and 'Country' are the columns in both datasets for matching
merged_data <- left_join(attacks, temperature, by = c("Year", "ISO_Code"))
sum(is.na(merged_data$Temperature)) #155 NA --> SHOULD I TAKE THEM OFF???
#________________________________________________________________________________________________________________________
#                           C L E A N I N G   OF    S E A    L E V E L
#________________________________________________________________________________________________________________________
sealevel <- read.csv("sealevel.csv")
# keep the 2 columns we are interested to analyze because the other are irrelevant for our project
sealevel <- subset(sealevel, select = c(Year, GMSL_GIA))
#Show the year only the first time by creating a new column called Year2
sealevel$Year2 <- ifelse(duplicated(sealevel$Year), NA, sealevel$Year)
# delete column Year due to the creation of column Year 2
sealevel <- subset(sealevel, select = -Year)
# delete NA because it does not bring anything to our analysis
sealevel <- na.omit(sealevel)
#Change name of column Year
column <- gsub("2","",colnames(sealevel))
colnames(sealevel) <- column
#________________________________________________________________________________________________________________________
#MERGE PREVIOUS AND NEW
# Assuming 'Year' is the columns in both datasets for matching
merged_data2 <- left_join(merged_data, sealevel, by = c("Year"))
#________________________________________________________________________________________________________________________
#                           C L E A N I N G   OF    CO2      L E V E L
#_________________________________________________________________________________________________________________________
if (!require(dplyr)) {
install.packages("dplyr")
}
# Charger le package dplyr
library(dplyr)
co2 <- read.csv("CO2.csv")
# Change names of columns in order to have the same columns that in the other datasets
names(co2)[names(co2) == "year"] <- "Year"
names(co2)[names(co2) == "Annual.CO..emissions"] <- "Annual CO2 Emissions"
names(co2)[names(co2) == "Entity"] <- "Country"
names(co2)[names(co2) == "Code"] <- "ISO_Code"
# keep the 4 columns we are interested to analyze
co2 <- subset(co2, select = c("ISO_Code", "Year", "Annual CO2 Emissions", "Country"))
# only keep information starting in 1970 because we want to look at the evolution of
# the last 50 years
co2<- co2[co2$Year >= 1970, ]
#co2$ISO_Code <- na_if(co2$ISO_Code, "")
co2$ISO_Code <- ifelse(co2$ISO_Code == "", NA, co2$ISO_Code)
co2 <- subset(co2, !is.na(ISO_Code))
#________________________________________________________________________________________________________________________
#MERGE FIRST THREE DATA SETS
# Assuming 'Year' and 'Country' are the columns in both datasets for matching
merged_data3 <- left_join(merged_data2, co2, by = c("Year", "ISO_Code"))
#Change name of a column
colnames(merged_data3)[colnames(merged_data3) == 'Country.x'] <- 'Country'
#Delete a useless column
merged_data3 <- select(merged_data3, -Country.y)
merged_data3$Temperature <- as.numeric(as.character(merged_data3$Temperature))
data_RQ2 <- merged_data3
data_RQ2 <- na.omit(data_RQ2)
str(data_RQ2) #ok now im sure they all num/int and no chr
#Run correlation matrix to be sure that there is no multicollinearity. When we run it, we see that
#all correlations are far from being equal to 1 or -1, which is a positive sign.
subset_data <- data_RQ2[, c("Temperature", "Annual CO2 Emissions", "GMSL_GIA")]
correlation_matrix <- cor(subset_data, use = "complete.obs")
corrplot1 <- corrplot(correlation_matrix, method = "circle")
# Create a new variable 'shark_attacks' representing the frequency of shark attacks per year
count_shark_attacks <- data_RQ2 %>%
group_by(Year, ISO_Code) %>%
summarize(SharkAttacksCount = n())
# Merge the aggregated shark attacks data back to your original dataset based on the 'year' and 'country' variables
data_RQ2 <- merge(data_RQ2, count_shark_attacks, by = c("Year", "ISO_Code"), all.x = TRUE)
# FIRST MODEL
filtered_data <- data_RQ2 %>%
filter(ISO_Code %in% c("USA", "ZAF", "AUS"))
View(data_RQ2)
install.packages("stargazer")
<<<<<<< Updated upstream
=======
library(stargazer)
stargazer(model, header=FALSE, type='html')
stargazer(model, header=FALSE)
install.packages("gtsummary")
library(gtsummary)
#6B. Continents with most co2 emissions
#The goal now is to regroup countries by continents and be able to have a better idea of where are most of the emissions coming from around the globe
# Get unique ISO codes to be able to put them in a group of continents
unique_iso_codes <- unique(co2$ISO_Code)
# Print the list of unique ISO codes
print(unique_iso_codes)
# Create a new column 'Region' based on the Continents and the countries
co2_grouped <- co2 %>%
mutate(Region = case_when(
ISO_Code %in% c(NA) ~ "Unknown",
ISO_Code %in% c("AFG", "ARM", "AZE", "BHR", "BGD", "BTN", "BOL", "BGR", "BFA", "BDI", "KHM", "CMR", "CPV", "CHN", "CXR", "CYP", "HKG", "IND", "IDN", "IRN", "IRQ", "ISR", "JOR", "JPN", "KAZ", "KWT", "KGZ", "LAO", "LBN", "MAC", "MYS", "MDV", "MNG", "MMR", "NPL", "PRK", "OMN", "PAK", "PSE", "PHL", "QAT", "SAU", "SGP", "KOR", "LKA", "TUR", "SYR", "TWN", "TJK", "THA", "TKM", "ARE", "UZB", "YEM", "VNM") ~ "Asia",
ISO_Code %in% c("ALB", "AND", "AUT", "BLR", "BEL", "BIH", "BWA", "HRV", "CZE", "DNK", "EST", "FIN", "FRO", "FRA", "GEO", "DEU", "GRC", "GRL", "GLP", "HUN", "ISL", "IRL", "ITA", "LVA", "LTU", "LIE", "LUX", "MLT", "MDA", "MNE", "NLD", "MKD", "NOR", "POL", "PRT", "ROU", "RUS", "SRB", "SVK", "SVN", "ESP", "SWE", "CHE", "UKR", "GBR") ~ "Europe",
ISO_Code %in% c("DZA", "AGO", "BEN", "CAF", "TCD", "COM", "COG", "CIV", "COD", "DJI", "TLS", "EGY", "ERI", "SWZ", "ETH", "GNQ", "GAB", "GMB", "GHA", "GIN", "GNB", "KEN", "LSO", "LBR", "LBY", "MDG", "MWI", "MLI", "MTQ", "MRT", "MUS", "MYT", "MAR", "MOZ", "NAM", "NER", "NGA", "REU", "RWA", "SHN", "SEN", "SYC", "SLE", "STP", "ZAF", "SOM", "SSD", "SDN", "SUR", "TZA", "TGO", "TUN", "UGA", "ZMB", "ZWE") ~ "Africa",
ISO_Code %in% c("AIA", "ATG", "ABW", "BHS", "BMU", "BRB", "BLZ", "VGB", "BRN", "CAN", "CRI", "CUB", "CUW", "DMA", "DOM", "SLV", "GRD", "GTM", "HTI", "HND", "JAM", "MSR", "MEX", "USA", "NIC", "PAN", "KNA", "LCA", "SPM", "VCT", "SXM", "TCA", "TTO") ~ "North America",
ISO_Code %in% c("ARG", "COL", "CHL", "ECU", "GUF", "GUY", "PRY", "PER", "URY", "VEN", "BRA", "BES") ~ "South America",
ISO_Code %in% c("AUS", "COK", "FJI", "PYF", "KIR", "MHL", "FSM", "NRU", "NCL", "NZL", "NIU", "PLW", "PNG", "WSM", "SLB", "TON", "TUV", "VUT", "WLF") ~ "Australia & Oceania",
ISO_Code %in% c("ATA") ~ "Antarctica"
))
# Print the result
print(co2_grouped)
# Print the interactive plot
interactive_attacks_evolution_sex
# Create a plot to show the trend of shark attacks throughout the years, including victim's sex (interactive version)
attacks_evolution_sex <- ggplot(data = attacks_processed_sex, aes(x = Year, fill = Sex)) +
geom_bar(position = "stack", color = "white") +
labs(title = "Shark Attacks Evolution Over Years by Sex",
x = "Year",
y = "Number of Attacks",
fill = "Sex") +
scale_fill_manual(values = c("pink", "blue", "orange"), name = "Sex") +
theme_minimal()
install.packages("plotly")
#15. See the evolution of shark attacks throughout the years with sex
# Create a plot to show the trend of shark attacks throughout the years, including victim's sex (interactive version)
attacks_evolution_sex <- ggplot(data = attacks_processed_sex, aes(x = Year, fill = Sex)) +
geom_bar(position = "stack", color = "white") +
labs(title = "Shark Attacks Evolution Over Years by Sex",
x = "Year",
y = "Number of Attacks",
fill = "Sex") +
scale_fill_manual(values = c("pink", "blue", "orange"), name = "Sex") +
theme_minimal()
install.packages("ggplot2")
#15. See the evolution of shark attacks throughout the years with sex
# Create a plot to show the trend of shark attacks throughout the years, including victim's sex (interactive version)
attacks_evolution_sex <- ggplot(data = attacks_processed_sex, aes(x = Year, fill = Sex)) +
geom_bar(position = "stack", color = "white") +
labs(title = "Shark Attacks Evolution Over Years by Sex",
x = "Year",
y = "Number of Attacks",
fill = "Sex") +
scale_fill_manual(values = c("pink", "blue", "orange"), name = "Sex") +
theme_minimal()
>>>>>>> Stashed changes
