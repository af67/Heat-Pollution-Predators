attacks <- subset(attacks, !is.na(Fatal..Y.N.))
names(attacks)[names(attacks) == "Fatal..Y.N."] <- "Fatality"
#________________________________________________________________________________________
#TYPE
#Regroup some words under the same word "Boat"
attacks$Type <- gsub("Boatomg|Boating", "Boat", attacks$Type)
#________________________________________________________________________________________________________________________
#final check up:
table(attacks$Date) #this one is fine
table(attacks$Year) #this one is fine
table(attacks$Type) #this one is fine
table(attacks$Country)#this one is fine
table(attacks$Activity)#this one is fine
table(attacks$Age)#this one is fine
table(attacks$Fatality)#this one is fine
table(attacks$Time)#this one is fine
table(attacks$Species)#this one is fine
#________________________________________________________________________________________________________________________
#ADD ISO CODE TO MAKE COUNTRIES IN COMMON
# Get ISO country codes
library(countrycode)
iso_codes <- countrycode(attacks$Country, "country.name", "iso3c")
attacks$ISO_Code <- countrycode(attacks$Country, "country.name", "iso3c")
#We can see that there are 23 countries with no ISO Code. We will fix them by hand.
rows_with_na <- which(is.na(attacks$ISO_Code))
rows_with_na
attacks$ISO_Code[attacks$Country %in% c("ENGLAND", "SCOTLAND", "BRITISH ISLES") & is.na(attacks$ISO_Code)] <- "GB"
attacks$ISO_Code[attacks$Country %in% c("AZORES") & is.na(attacks$ISO_Code)] <- "PRT"
attacks$ISO_Code[attacks$Country %in% c("ST. MAARTIN", "ST. MARTIN") & is.na(attacks$ISO_Code)] <- "MAF"
attacks$ISO_Code[attacks$Country %in% c("OKINAWA") & is.na(attacks$ISO_Code)] <- "JPN"
attacks$ISO_Code[attacks$Country %in% c("MICRONESIA") & is.na(attacks$ISO_Code)] <- "FSM"
attacks <- subset(attacks, !is.na(ISO_Code))
#________________________________________________________________________________________________________________________
#                           C L E A N I N G   OF    T E M P E R A T U R E S
#________________________________________________________________________________________________________________________
library(dplyr)
temperature <- read_xlsx("Temperature.xlsx")
#it did not read the "°C" on the column Unit, so I'll change it manually
temperature <- temperature %>% mutate(Unit = "°C")
#I take off all the columns that we do not need
temperature <- temperature %>% select(-'Area Code (M49)', -'Months Code', -'Element Code')
#eliminate all columns having an F at the end
columns_to_remove <- grep("F$", names(temperature), value = TRUE)
temperature <- temperature[, !(names(temperature) %in% columns_to_remove)]
# keep only meteorological year, we dont need to work with monthly stuff
target_name <- "Meteorological year"
temperature <- temperature[temperature$Months == target_name, ]
target_name2 <- "Temperature change"
temperature <- temperature[temperature$Element == target_name2, ]
#  take off cols that I dont need, take off NA and transforsm year cols so that i take off Y. in this
#way i can match with the main dataset
temperature <- temperature %>% select(-'Area Code', -'Months', -'Element', -'Unit')
new_colnames <- gsub("Y", "", colnames(temperature))
colnames(temperature) <- new_colnames
temperature <- na.omit(temperature)
# I need to change columns and rows so that the common variable (year) is on the left side
temperature <- t(temperature)
# I want the first row to be the header
colnames(temperature) <- temperature[1, ]
clean_temperature <- temperature[-1, ]
#col names in CAPS
colnames(clean_temperature) <- toupper(colnames(clean_temperature))
library(tidyr)
# Convert the matrix/array to a data frame
temperature <- as.data.frame(clean_temperature)
# Add 'Year' as a separate column
temperature$Year <- rownames(clean_temperature)
# Reshape the data from wide to long format
temperature <- tidyr::pivot_longer(temperature,
cols = -Year,
names_to = "Country",
values_to = "Temperature")
# Reorder columns as per your desired format
temperature <- temperature[c("Year", "Country", "Temperature")]
temperature <- temperature %>% filter(Year >= 1970)
temperature$Year <- as.numeric(temperature$Year)
temperature <- temperature %>%
mutate(Country = ifelse(Country == "UNITED STATES OF AMERICA", "USA", Country))
temperature$ISO_Code <- countrycode(temperature$Country, "country.name", "iso3c")
temperature$ISO_Code[temperature$Country %in% c("MICRONESIA") & is.na(temperature$ISO_Code)] <- "FSM"
#now that i put iso, i can remove the country one
temperature <- temperature %>% select(-'Country')
#________________________________________________________________________________________________________________________
#MERGE FIRST TWO DATA SETS
# Assuming 'Year' and 'Country' are the columns in both datasets for matching
merged_data <- left_join(attacks, temperature, by = c("Year", "ISO_Code"))
sum(is.na(merged_data$Temperature))
#________________________________________________________________________________________________________________________
#                           C L E A N I N G   OF    S E A    L E V E L
#________________________________________________________________________________________________________________________
sealevel <- read.csv("sealevel.csv")
# keep the 2 columns we are interested to analyze because the other are irrelevant for our project
sealevel <- subset(sealevel, select = c(Year, GMSL_GIA))
#Show the year only the first time by creating a new column called Year2
sealevel$Year2 <- ifelse(duplicated(sealevel$Year), NA, sealevel$Year)
# delete column Year due to the creation of column Year 2
sealevel <- subset(sealevel, select = -Year)
# delete NA because it does not bring anything to our analysis
sealevel <- na.omit(sealevel)
#Change name of column Year
column <- gsub("2","",colnames(sealevel))
colnames(sealevel) <- column
#________________________________________________________________________________________________________________________
#MERGE PREVIOUS AND NEW
# Assuming 'Year' is the columns in both datasets for matching
merged_data2 <- left_join(merged_data, sealevel, by = c("Year"))
#________________________________________________________________________________________________________________________
#                           C L E A N I N G   OF    CO2      L E V E L
#_________________________________________________________________________________________________________________________
if (!require(dplyr)) {
install.packages("dplyr")
}
# Charger le package dplyr
library(dplyr)
co2 <- read.csv("CO2.csv")
# Change names of columns in order to have the same columns that in the other datasets
names(co2)[names(co2) == "year"] <- "Year"
names(co2)[names(co2) == "Annual.CO..emissions"] <- "Annual CO2 Emissions"
names(co2)[names(co2) == "Entity"] <- "Country"
names(co2)[names(co2) == "Code"] <- "ISO_Code"
# keep the 4 columns we are interested to analyze
co2 <- subset(co2, select = c("ISO_Code", "Year", "Annual CO2 Emissions", "Country"))
# only keep information starting in 1970 because we want to look at the evolution of
# the last 50 years
co2<- co2[co2$Year >= 1970, ]
#co2$ISO_Code <- na_if(co2$ISO_Code, "")
co2$ISO_Code <- ifelse(co2$ISO_Code == "", NA, co2$ISO_Code)
co2 <- subset(co2, !is.na(ISO_Code))
#________________________________________________________________________________________________________________________
#MERGE FIRST THREE DATA SETS
# Assuming 'Year' and 'Country' are the columns in both datasets for matching
merged_data3 <- left_join(merged_data2, co2, by = c("Year", "ISO_Code"))
#Change name of a column
colnames(merged_data3)[colnames(merged_data3) == 'Country.x'] <- 'Country'
#Delete a useless column
merged_data3 <- select(merged_data3, -Country.y)
merged_data3$Temperature <- as.numeric(as.character(merged_data3$Temperature))
#for merged_data3, which we will use for our regressions, we need numerical variables
#therefore, we will make changes in some categorical ones
#TYPE
#Let's transform the Type variable on numeric. 1 corresponds to Boat, 2 to Unprovoked, Invalid to 3
# Provoked to 4, Questionable to 5 and Sea Disaster to 6
categories <- c("Boat" = 1, "Unprovoked" = 2, "Invalid" = 3, "Provoked" = 4, "Questionable" = 5, "Sea Disaster" = 6)
merged_data3$Type <- factor(merged_data3$Type, levels = names(categories))
merged_data3$Type <- as.numeric(merged_data3$Type)
#TIME
# Let's focus on the transformation of time where morning correspond to 0, afternoon to 1,
# evening to 2 and night to 3
merged_data3$Time <- as.numeric(factor(merged_data3$Time, levels = c("morning", "afternoon", "evening", "night")))
#SEX
merged_data3$Sex <- ifelse(merged_data3$Sex == "M", 0,
ifelse(merged_data3$Sex == "F", 1, 2))
#SPECIES
merged_data3 <- merged_data3 %>%
mutate(Species = as.numeric(factor(Species)))
# Get the top 5 species
top_species <- merged_data3 %>%
count(Species, sort = TRUE) %>%
slice_head(n = 5)
# Create a logical condition to include only the top 5 species
condition <- merged_data3$Species %in% top_species$Species
# Subset the data based on the condition
species_filtered_data <- merged_data3[condition, ]
#FATALITY
merged_data3$Fatality <- ifelse(merged_data3$Fatality == "Y", 1, 0)
#EDA
#1. See the evolution of shark attacks throughout the years
# Check the column names in your dataset
colnames(attacks)
# Check the structure of your data frame
str(attacks)
# Create a plot to show the trend of shark attacks throughout the years
ggplot(data = attacks, aes(x = Year)) +
geom_smooth(stat = "count", aes(group = 1), color = "blue", size = 1) +
geom_bar(stat = "count", fill = "red") +
labs(title = "Shark Attacks Evolution Over Years", x = "Year", y = "Number of Attacks")
shark_attacks_by_country <- attacks %>%
group_by(Country) %>%
summarise(total_attacks = n())
shark_attacks_by_country <- shark_attacks_by_country %>%
mutate(CountryCategory = ifelse(total_attacks >= 30, as.character(Country), "Other"))
# Order the countries by frequency in descending order
shark_attacks_by_country$CountryCategory <- reorder(shark_attacks_by_country$CountryCategory, -shark_attacks_by_country$total_attacks)
# Plot the data
plot2<- ggplot(data = shark_attacks_by_country, aes(x = total_attacks, y = CountryCategory)) +
geom_col(fill = "skyblue") +
labs(title = "Total Shark Attacks in Each Country", x = "Number of Attacks", y = "Country") +
theme_minimal() +
theme(axis.text.y = element_text(hjust = 1)) +
scale_y_discrete(labels = scales::label_wrap(10))
interactive_plot <- ggplotly(plot2)
interactive_plot
bar_colors <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3")
# Create a sorted table
sorted_table <- table(attacks$Time)
sorted_table <- sorted_table[order(-sorted_table)]
# Create a bar plot with the sorted data
barplot1 <- barplot(sorted_table,
col = bar_colors,
xlab = "Time of Day", ylab = "Frequency of Attacks",
main = "Frequency of Shark Attacks by Time of Day",
border = "white",
ylim = c(0, 1800),
space = 0.5,
cex.names = 0.8,
font.axis = 2,
beside = TRUE)
# Add text labels with frequencies on the bars
text_labels <- sorted_table
text(x = barplot1, y = sorted_table, labels = text_labels, pos = 3, cex = 0.8, col = "black")
interactive_co2_evolution <- ggplotly(
ggplot(data = co2, aes(x = Year, y = `Annual CO2 Emissions`)) +
geom_line(color = "blue") +
labs(title = "Trend of CO2 Emissions Over the Years", x = "Year", y = "Annual CO2 Emissions")
)
# Display the interactive plot
print(interactive_co2_evolution)
ggplot(data = co2, aes(x = reorder(ISO_Code, -`Annual CO2 Emissions`), y = `Annual CO2 Emissions`)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top Countries with the Most CO2 Emissions", x = "Countries", y = "Annual CO2 Emissions") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filter out 'OWID_WRL' from the data
co2_filtered_wrl <- co2 %>% filter(ISO_Code != "OWID_WRL")
# Select the top 30 countries based on CO2 emissions
top30_countries <- co2_filtered_wrl %>%
group_by(ISO_Code) %>%
summarize(`Annual CO2 Emissions` = sum(`Annual CO2 Emissions`)) %>%
arrange(desc(`Annual CO2 Emissions`)) %>%
top_n(30)
# Create an interactive bar plot
interactive_top30_countries_co2 <- ggplotly(
ggplot(data = top30_countries, aes(x = reorder(ISO_Code, -`Annual CO2 Emissions`), y = `Annual CO2 Emissions`)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 30 Countries with the Most CO2 Emissions", x = "Countries", y = "Annual CO2 Emissions") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
)
# Display the interactive bar plot
print(interactive_top30_countries_co2)
#6B. Continents with most co2 emissions
#The goal now is to regroup countries by continents and be able to have a better idea of where are most of the emissions coming from around the globe
# Get unique ISO codes to be able to put them in a group of continents
unique_iso_codes <- unique(co2$ISO_Code)
# Create a new column 'Region' based on the Continents and the countries
co2_grouped <- co2 %>%
mutate(Region = case_when(
ISO_Code %in% c(NA) ~ "Unknown",
ISO_Code %in% c("AFG", "ARM", "AZE", "BHR", "BGD", "BTN", "BOL", "BGR", "BFA", "BDI", "KHM", "CMR", "CPV", "CHN", "CXR", "CYP", "HKG", "IND", "IDN", "IRN", "IRQ", "ISR", "JOR", "JPN", "KAZ", "KWT", "KGZ", "LAO", "LBN", "MAC", "MYS", "MDV", "MNG", "MMR", "NPL", "PRK", "OMN", "PAK", "PSE", "PHL", "QAT", "SAU", "SGP", "KOR", "LKA", "TUR", "SYR", "TWN", "TJK", "THA", "TKM", "ARE", "UZB", "YEM", "VNM") ~ "Asia",
ISO_Code %in% c("ALB", "AND", "AUT", "BLR", "BEL", "BIH", "BWA", "HRV", "CZE", "DNK", "EST", "FIN", "FRO", "FRA", "GEO", "DEU", "GRC", "GRL", "GLP", "HUN", "ISL", "IRL", "ITA", "LVA", "LTU", "LIE", "LUX", "MLT", "MDA", "MNE", "NLD", "MKD", "NOR", "POL", "PRT", "ROU", "RUS", "SRB", "SVK", "SVN", "ESP", "SWE", "CHE", "UKR", "GBR") ~ "Europe",
ISO_Code %in% c("DZA", "AGO", "BEN", "CAF", "TCD", "COM", "COG", "CIV", "COD", "DJI", "TLS", "EGY", "ERI", "SWZ", "ETH", "GNQ", "GAB", "GMB", "GHA", "GIN", "GNB", "KEN", "LSO", "LBR", "LBY", "MDG", "MWI", "MLI", "MTQ", "MRT", "MUS", "MYT", "MAR", "MOZ", "NAM", "NER", "NGA", "REU", "RWA", "SHN", "SEN", "SYC", "SLE", "STP", "ZAF", "SOM", "SSD", "SDN", "SUR", "TZA", "TGO", "TUN", "UGA", "ZMB", "ZWE") ~ "Africa",
ISO_Code %in% c("AIA", "ATG", "ABW", "BHS", "BMU", "BRB", "BLZ", "VGB", "BRN", "CAN", "CRI", "CUB", "CUW", "DMA", "DOM", "SLV", "GRD", "GTM", "HTI", "HND", "JAM", "MSR", "MEX", "USA", "NIC", "PAN", "KNA", "LCA", "SPM", "VCT", "SXM", "TCA", "TTO") ~ "North America",
ISO_Code %in% c("ARG", "COL", "CHL", "ECU", "GUF", "GUY", "PRY", "PER", "URY", "VEN", "BRA", "BES") ~ "South America",
ISO_Code %in% c("AUS", "COK", "FJI", "PYF", "KIR", "MHL", "FSM", "NRU", "NCL", "NZL", "NIU", "PLW", "PNG", "WSM", "SLB", "TON", "TUV", "VUT", "WLF") ~ "Australia & Oceania",
ISO_Code %in% c("ATA") ~ "Antarctica"
))
# Step 1: Calculate Mean Emissions by Year and Region
mean_emissions <- co2_grouped %>%
group_by(Year, Region) %>%
summarize(Mean_Emissions = mean(`Annual CO2 Emissions`, na.rm = TRUE))
# Step 2: Let's plot the Data
# Create an interactive line plot
interactive_co2_continent_wNA <- ggplotly(
ggplot(mean_emissions, aes(x = Year, y = Mean_Emissions, color = Region)) +
geom_line() +
labs(title = "CO2 Emissions by Continent",
x = "Year",
y = "Annual CO2 Emissions") +
theme_minimal()
)
# Now we get rid of that Unknown Region to have a better view of the other Regions
# Step 1: Calculate Mean Emissions by Year and Region and getting rid of the things we don't want
mean_emissions <- co2_grouped %>%
filter(!is.na(Region) & !is.na(`ISO_Code`) & Region != "Unknown") %>%
group_by(Year, Region) %>%
summarize(Mean_Emissions = mean(`Annual CO2 Emissions`, na.rm = TRUE))
# Step 2: Let's plot the Data
interactive_co2_continent <- ggplotly(
ggplot(mean_emissions, aes(x = Year, y = Mean_Emissions, color = Region)) +
geom_line() +
labs(title = "CO2 Emissions by Continent",
x = "Year",
y = "Annual CO2 Emissions") +
theme_minimal()
)
# Display the interactive line plot
print(interactive_co2_continent)
# Create a line plot
interactive_sealevel <- ggplotly(
ggplot(data = sealevel, aes(x = Year, y = GMSL_GIA)) +
geom_line(color = "green", size = 1.5) +
labs(title = "Evolution of Sea Level Over the Years", x = "Year", y = "Sea Level")
)
# Display the interactive line plot
print(interactive_sealevel)
# Filter out NA values and non-numeric values in the Temperature column
temperature_data_filtered <- temperature %>%
filter(!is.na(Temperature), !is.na(as.numeric(Temperature)))
# Convert the Temperature column to numeric
temperature_data_filtered$Temperature <- as.numeric(temperature_data_filtered$Temperature)
# Calculate the mean temperature for each year
world_temperature <- temperature_data_filtered %>%
group_by(Year) %>%
summarise(World_Temperature = mean(Temperature, na.rm = TRUE))
# Create a line plot for the world temperature
interactive_temperature <- ggplotly(
ggplot(world_temperature, aes(x = Year, y = World_Temperature)) +
geom_line() +
labs(title = "World Temperature Change Over Years",
x = "Year",
y = "World Temperature Change") +
theme_minimal()
)
# Display the interactive line plot
print(interactive_temperature)
# Create a summary table with the count of attacks for each age
attacks_summary <- attacks %>%
group_by(Age) %>%
summarise(NumAttacks = n())
# Scatter plot to show the relationship between the number of shark attacks and age
interactive_attacks_age <- ggplotly(
ggplot(attacks_summary, aes(x = Age, y = NumAttacks)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a linear trend line
labs(title = "Relationship between Shark Attacks and Age",
x = "Age",
y = "Number of Attacks")
)
# Display the interactive scatter plot
print(interactive_attacks_age)
# Create a summary table with the count of attacks for each sex
attacks_summary_sex <- attacks %>%
group_by(Sex) %>%
summarise(NumAttacks = n())
# Define the desired order of levels
sex_order <- c("M", "F", "Unknown")
# Convert the 'Sex' variable to a factor with the specified order
attacks_summary_sex$Sex <- factor(attacks_summary_sex$Sex, levels = sex_order)
# Bar plot to show the distribution of shark attacks by sex
interactive_bar_plot_sex_attacks <- ggplotly(
ggplot(attacks_summary_sex, aes(x = Sex, y = NumAttacks, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
labs(title = "Distribution of Shark Attacks by Sex",
x = "Sex",
y = "Number of Attacks") +
scale_fill_manual(values = c("blue", "pink", "gray"))
)
# Display the interactive bar plot
print(interactive_bar_plot_sex_attacks)
#Create a new column in attacks that represents the continents
attacks_grouped <- attacks %>%
mutate(Region = case_when(
ISO_Code %in% c(NA) ~ "Unknown",
ISO_Code %in% c("AFG", "ARM", "AZE", "BHR", "BGD", "BTN", "BOL", "BGR", "BFA", "BDI", "KHM", "CMR", "CPV", "CHN", "CXR", "CYP", "HKG", "IND", "IDN", "IRN", "IRQ", "ISR", "JOR", "JPN", "KAZ", "KWT", "KGZ", "LAO", "LBN", "MAC", "MYS", "MDV", "MNG", "MMR", "NPL", "PRK", "OMN", "PAK", "PSE", "PHL", "QAT", "SAU", "SGP", "KOR", "LKA", "TUR", "SYR", "TWN", "TJK", "THA", "TKM", "ARE", "UZB", "YEM", "VNM") ~ "Asia",
ISO_Code %in% c("ALB", "AND", "AUT", "BLR", "BEL", "BIH", "BWA", "HRV", "CZE", "DNK", "EST", "FIN", "FRO", "FRA", "GEO", "DEU", "GRC", "GRL", "GLP", "HUN", "ISL", "IRL", "ITA", "LVA", "LTU", "LIE", "LUX", "MLT", "MDA", "MNE", "NLD", "MKD", "NOR", "POL", "PRT", "ROU", "RUS", "SRB", "SVK", "SVN", "ESP", "SWE", "CHE", "UKR", "GBR") ~ "Europe",
ISO_Code %in% c("DZA", "AGO", "BEN", "CAF", "TCD", "COM", "COG", "CIV", "COD", "DJI", "TLS", "EGY", "ERI", "SWZ", "ETH", "GNQ", "GAB", "GMB", "GHA", "GIN", "GNB", "KEN", "LSO", "LBR", "LBY", "MDG", "MWI", "MLI", "MTQ", "MRT", "MUS", "MYT", "MAR", "MOZ", "NAM", "NER", "NGA", "REU", "RWA", "SHN", "SEN", "SYC", "SLE", "STP", "ZAF", "SOM", "SSD", "SDN", "SUR", "TZA", "TGO", "TUN", "UGA", "ZMB", "ZWE") ~ "Africa",
ISO_Code %in% c("AIA", "ATG", "ABW", "BHS", "BMU", "BRB", "BLZ", "VGB", "BRN", "CAN", "CRI", "CUB", "CUW", "DMA", "DOM", "SLV", "GRD", "GTM", "HTI", "HND", "JAM", "MSR", "MEX", "USA", "NIC", "PAN", "KNA", "LCA", "SPM", "VCT", "SXM", "TCA", "TTO") ~ "North America",
ISO_Code %in% c("ARG", "COL", "CHL", "ECU", "GUF", "GUY", "PRY", "PER", "URY", "VEN", "BRA", "BES") ~ "South America",
ISO_Code %in% c("AUS", "COK", "FJI", "PYF", "KIR", "MHL", "FSM", "NRU", "NCL", "NZL", "NIU", "PLW", "PNG", "WSM", "SLB", "TON", "TUV", "VUT", "WLF") ~ "Australia & Oceania",
ISO_Code %in% c("ATA") ~ "Antarctica"
))
# Filter data to include only valid regions (excluding "Unknown")
filtered_attacks_region <- attacks_grouped %>%
filter(!is.na(Region) & Region != "Unknown")
# Bar plot to show the distribution of shark attacks by region
interactive_bar_plot_region_attacks <- ggplotly(
ggplot(filtered_attacks_region, aes(x = Region, fill = Region)) +
geom_bar() +
labs(title = "Distribution of Shark Attacks by Region",
x = "Region",
y = "Number of Attacks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for better readability
)
# Display the interactive bar plot
print(interactive_bar_plot_region_attacks)
# Calculate the number of attacks per year
attacks_summary <- attacks %>%
group_by(Year) %>%
summarize(Number_of_Attacks = n())
# Assuming there's a common column named "Year" in both datasets
merged_data5 <- merge(attacks_summary, sealevel, by = "Year", all.x = TRUE)
correlation_coefficient <- cor(merged_data5$Number_of_Attacks, merged_data5$GMSL_GIA, use = "complete.obs")
# Scatter plot
interactive_scatter_plot_sea_level_attacks <- ggplotly(
ggplot(merged_data5, aes(x = GMSL_GIA, y = Number_of_Attacks)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a linear trend line
labs(title = "Relationship Between Sea Level and Shark Attacks",
x = "Global Mean Sea Level Global Isostatic Adjustment (GMSL_GIA)",
y = "Number of Attacks")
)
# Display the interactive scatter plot
print(interactive_scatter_plot_sea_level_attacks)
# Identify non-numeric values in the Temperature column
non_numeric_temp <- temperature %>%
filter(!is.numeric(Temperature)) %>%
distinct(Temperature)
# Convert "Temperature" column to numeric
temperature$Temperature <- as.numeric(temperature$Temperature)
# Check for negative values
negative_values <- temperature %>%
filter(Temperature < 0)
# Calculate the mean temperature
mean_temp_world <- temperature %>%
group_by(Year) %>%
summarize(Mean_Temperature = mean(Temperature, na.rm = TRUE))
# Filter out non-numeric values in the Temperature column
temperature2 <- temperature %>%
filter(is.numeric(Temperature))
# Calculate mean temperature for the world per year
mean_temp_world <- temperature2 %>%
group_by(Year) %>%
summarize(Mean_Temperature = mean(Temperature, na.rm = TRUE))
# Merge datasets
merged_data6 <- merge(attacks_summary, mean_temp_world, by = "Year", all.x = TRUE)
# Plotting
interactive_scatter_plot_worldtemperature_attacks <- ggplotly(
ggplot(merged_data6, aes(x = Mean_Temperature, y = Number_of_Attacks)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a linear trend line
labs(title = "Relationship between Shark Attacks and World Mean Temperature Change",
x = "World Mean Temperature Change",
y = "Number of Shark Attacks") +
theme_minimal()
)
print(interactive_scatter_plot_worldtemperature_attacks)
# Check the top activities with the most attacks
top_activities <- attacks_processed_sex %>%
group_by(Activity, Sex) %>%
summarize(Number_of_Attacks = n()) %>%
arrange(desc(Number_of_Attacks)) %>%
top_n(30)  # Adjust the number if you want more or fewer top activities
# Plot the results
top_activities_attacks <- ggplot(top_activities, aes(x = reorder(Activity, -Number_of_Attacks), y = Number_of_Attacks, fill = Sex)) +
geom_bar(stat = "identity") +
labs(title = "Top Activities with the Most Attacks",
x = "Activities",
y = "Number of Attacks",
fill = "Sex") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
interactive_top_activities_attacks <- ggplotly(top_activities_attacks)
interactive_top_activities_attacks
# Check the top activities with the most attacks
top_activities <- attacks_processed_sex %>%
group_by(Activity, Sex) %>%
summarize(Number_of_Attacks = n()) %>%
arrange(desc(Number_of_Attacks)) %>%
top_n(30)  # Adjust the number if you want more or fewer top activities
# Check the top activities with the most attacks
top_activities <- attacks %>%
group_by(Activity, Sex) %>%
summarize(Number_of_Attacks = n()) %>%
arrange(desc(Number_of_Attacks)) %>%
top_n(30)  # Adjust the number if you want more or fewer top activities
# Plot the results
top_activities_attacks <- ggplot(top_activities, aes(x = reorder(Activity, -Number_of_Attacks), y = Number_of_Attacks, fill = Sex)) +
geom_bar(stat = "identity") +
labs(title = "Top Activities with the Most Attacks",
x = "Activities",
y = "Number of Attacks",
fill = "Sex") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
interactive_top_activities_attacks <- ggplotly(top_activities_attacks)
interactive_top_activities_attacks
# Create a plot to show the trend of shark attacks throughout the years, including victim's sex (interactive version)
attacks_evolution_sex <- ggplot(data = attacks_processed_sex, aes(x = Year, fill = Sex)) +
geom_bar(position = "stack", color = "white") +
labs(title = "Shark Attacks Evolution Over Years by Sex",
x = "Year",
y = "Number of Attacks",
fill = "Sex") +
scale_fill_manual(values = c("pink", "blue", "orange"), name = "Sex") +
theme_minimal()
interactive_attacks_evolution_sex <- ggplotly(attacks_evolution_sex)
interactive_attacks_evolution_sex
# Create a plot to show the trend of shark attacks throughout the years, including victim's sex (interactive version)
attacks_evolution_sex <- ggplot(data = attacks, aes(x = Year, fill = Sex)) +
geom_bar(position = "stack", color = "white") +
labs(title = "Shark Attacks Evolution Over Years by Sex",
x = "Year",
y = "Number of Attacks",
fill = "Sex") +
scale_fill_manual(values = c("pink", "blue", "orange"), name = "Sex") +
theme_minimal()
interactive_attacks_evolution_sex <- ggplotly(attacks_evolution_sex)
interactive_attacks_evolution_sex
# Create a plot to show the repartition of shark attacks per month by sex
attacks_per_months <- ggplot(data = attacks, aes(x = factor(Date), fill = Sex)) +
geom_bar(position = "stack", color = "white") +
labs(title = "Shark Attacks Repartition by Month and Sex",
x = "Month",
y = "Number of Attacks",
fill = "Sex") +
scale_fill_manual(values = c("pink", "blue", "orange"), name = "Sex") +
theme_minimal()
interactive_attacks_per_months <- ggplotly(attacks_per_months)
interactive_attacks_per_months
library(tidyverse)
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(countrycode)
library(corrplot)
library(viridisLite)
library(htmltools)
library(RColorBrewer)
library(car)
library(ggplot2)
library(plotly)
library(plotly)
View(attacks)
